user  nginx;
worker_processes  auto;
error_log /var/log/nginx/error.log notice;
pid /run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;

    keepalive_timeout   65;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;
    include /etc/nginx/conf.d/*.conf;

    server {
        listen       80;
        # listen       [::]:80;  IPv6 주소 용
        server_name  _;

        # include /etc/nginx/default.d/*.conf;

        location / {
            proxy_pass http://ec2-3-36-11-16.ap-northeast-2.compute.amazonaws.com:80/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # proxy_set_header Host $host;
            # 클라이언트 요청이 프록시를 통해 전달될 때, 원격 서버에게 요청한 호스트명을 알려줌
            # => 원격 서버는 요청을 받은 호스트에 대한 적절한 응답을 할 수 있음
            # ( $host = 클라이언트가 요청한 호스트명 )

            # proxy_set_header X-Real-IP $remote_addr;
            # 원격 서버가 Nginx의 IP 주소를 클라이언트의 IP 주소로 오인하지 않게, 클라이언트의 실제 IP 주소를 전달
            # ( $remote_addr = 클라이언트의 실제 IP 주소 )

            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # 클라이언트의 IP 주소와 이전 프록시 서버를 거친 IP 주소 목록을 전달
            # => 원격 서버가 클라이언트의 실제 IP 주소 & 이전에 거친 프록시 서버의 IP 주소 확인
            # ( $proxy_add_x_forwarded_for = 현재 클라이언트의 IP 주소를 기존의 X-Forwarded-For 헤더 값에 추가 )

            # proxy_set_header X-Forwarded-Proto $scheme;
            # 클라이언트의 원본 프로토콜을 전달
            # => Nginx를 HTTPS로 구성했지만 클라이언트가 HTTP를 통해 연결할 때, 이를 알리기 위해 사용
            # $scheme 변수 = 현재 요청에 사용된 프로토콜(HTTP 또는 HTTPS)을 나타냄
        }
    }
}